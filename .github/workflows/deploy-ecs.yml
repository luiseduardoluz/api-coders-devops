name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          imagename=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $imagename .
          docker push $imagename
          echo "::add-mask::$imagename"
          encrypted_value=$(gpg --symmetric --batch --passphrase "SECRET" --output - <(echo "$imagename") | base64 -w0)
          echo "::set-output name=image::$encrypted_value"
  deploy:
    name: Deploy prod
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Image
        id: get_image
        shell: bash
        run: |
          image=$(gpg --decrypt --quiet --batch --passphrase "SECRET" --output - <(echo "${{ needs.build.outputs.image }}" | base64 --decode))
          echo "::add-mask::$image"
          echo "::set-output name=image::$image"

      - name: Describe task-definition
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: coders-container
          image: ${{ steps.get_image.outputs.image }}
          environment-variables: ${{ env.ECS_ENVIROMENTS }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
